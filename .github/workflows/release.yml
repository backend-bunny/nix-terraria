name: Release Docker Image

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Setup Cachix
        uses: cachix/cachix-action@v12
        with:
          name: nix-community
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: |
          # Remove 'v' prefix from tag if it exists
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT

          # Extract major, minor versions
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT
          echo "major_minor=$MAJOR.$MINOR" >> $GITHUB_OUTPUT

      - name: Build Docker image with Nix
        run: |
          # Allow unfree packages for tModLoader
          export NIXPKGS_ALLOW_UNFREE=1

          # Build the Docker image
          nix build .#docker --impure

          # Load the image into Docker
          docker load < result

          # Get the built image name
          BUILT_IMAGE=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep -v "REPOSITORY" | head -n1)
          echo "Built image: $BUILT_IMAGE"

          # Tag with semantic versions
          docker tag "$BUILT_IMAGE" "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
          docker tag "$BUILT_IMAGE" "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major_minor }}"
          docker tag "$BUILT_IMAGE" "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major }}"
          docker tag "$BUILT_IMAGE" "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

      - name: Push Docker image
        run: |
          # Push all version tags
          docker push "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
          docker push "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major_minor }}"
          docker push "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major }}"
          docker push "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

      - name: Update release with Docker image info
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const release_id = context.payload.release.id;
            const version = '${{ steps.version.outputs.version }}';

            const imageInfo = `
            ## 🐳 Docker Image

            The Docker image for this release is available at:

            \`\`\`bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${version}
            \`\`\`

            **Available tags:**
            - \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${version}\` (exact version)
            - \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major_minor }}\` (major.minor)
            - \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major }}\` (major version)
            - \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\` (latest release)

            **Quick start:**
            \`\`\`bash
            docker run -d \\
              --name tmodloader-server \\
              -p 7777:7777/tcp \\
              -p 7777:7777/udp \\
              -v tmodloader-data:/var/lib/tmodloader \\
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${version}
            \`\`\`
            `;

            // Get current release body
            const { data: release } = await github.rest.repos.getRelease({
              owner,
              repo,
              release_id
            });

            // Update release with Docker image info
            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id,
              body: release.body + imageInfo
            });

      - name: Generate release summary
        run: |
          echo "## 🚀 Release Docker Image Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** ${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Published Images:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major_minor }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY